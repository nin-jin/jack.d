test
	name =name of struct node as value node
	case name
		integer =1
		float =1.1
	case
		=integer
		=float

test
	name =get first element of list
	lisp =( car '( 'one 'two 'three ) )
	case head
		=one
		=two
		=three
	case =one

test
	name =get last element of list
	lisp =( car last '( 'one 'two 'three ) )
	case tail
		=one
		=two
		=three
	case =three

test
	name =get list without first element
	lisp =( cdr '( 'one 'two 'three ) )
	case cut-head
		=one
		=two
		=three
	case
		=two
		=three

test
	name =get list without last element
	lisp =( butlast '( 'one 'two 'three ) )
	case cut-tail
		=one
		=two
		=three
	case
		=one
		=two

test
	name =quote tree
	name =make tree node by name an child list
	lisp ='( car '( 'one ) )
	lisp =( cons car '( 'one ) )
	case tree head =one
	case make
		name =head
		child =one

test
	name =evaluate jack code
	lisp =( eval '( car '( 'one 'two ) ) )
	case jack tree head
		=one
		=two
	case head
		=one
		=two

hide test
	name =define and use custom macro
	case jack
		let body cut-head cut-tail from
		tree body
			=one
			=two
			=three
			=four
	case
		=two
		=three

hide scope
	check order?
		0
		x
		10
	case true log =yes
	case false log =no
	case ~number log =wrong input
